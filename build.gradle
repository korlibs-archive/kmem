import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
	ext.kotlinVersion = '1.2.0-rc-39'
	ext.compilerVersion = ext.kotlinVersion
	ext.librariesVersion = ext.kotlinVersion
	ext.eapChannel = 'http://dl.bintray.com/kotlin/kotlin-eap-1.2'

	repositories {
		jcenter()
		maven { url eapChannel }
		maven { url "https://plugins.gradle.org/m2/" }
		mavenLocal()
	}

	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$compilerVersion"
	}
}

allprojects {
	repositories {
		mavenLocal()
		jcenter()
		maven { url eapChannel }
		mavenLocal()
	}

	group 'com.soywiz'
	version '0.1.0'

	if (project == rootProject) {
		new File(rootProject.rootDir, "kmem/common/src/main/kotlin/com/soywiz/kmem/KmemVersion.kt").write(
				"package com.soywiz.kmem\n\nval KMEM_VERSION = \"$version\""
		)
	}

	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'signing'
	apply plugin: 'maven-publish'
	apply plugin: 'idea'

	it.afterEvaluate {
		if (it.plugins.hasPlugin("kotlin-platform-common")) {
			dependencies {
				compile "org.jetbrains.kotlin:kotlin-stdlib-common:$librariesVersion"
				testCompile "org.jetbrains.kotlin:kotlin-test-common:$librariesVersion"
				testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common:$librariesVersion"
			}

			kotlin {
				experimental { coroutines 'enable' }
			}
		}
		if (it.plugins.hasPlugin("kotlin-platform-jvm") || it.plugins.hasPlugin("kotlin")) {
			dependencies {
				compile "org.jetbrains.kotlin:kotlin-stdlib:$librariesVersion"
				testCompile "org.jetbrains.kotlin:kotlin-test:$librariesVersion"
				testCompile "org.jetbrains.kotlin:kotlin-test-junit:$librariesVersion"
				testCompile "junit:junit:4.12"
			}

			kotlin {
				experimental { coroutines 'enable' }
			}

			compileJava.options.encoding = 'UTF-8'
			compileTestJava.options.encoding = 'UTF-8'

			sourceCompatibility = 1.7
			targetCompatibility = 1.7
		}

		// https://discuss.kotlinlang.org/t/unit-testing-in-kotlin-js/3943
		// https://github.com/JetBrains/kotlin-examples/blob/5e883a6d67afc8b8aeb8991af6a7b6183be2213f/gradle/js-tests/mocha/build.gradle
		if (it.plugins.hasPlugin("kotlin-platform-js") || it.plugins.hasPlugin("kotlin2js")) {
			dependencies {
				compile "org.jetbrains.kotlin:kotlin-stdlib-js:$librariesVersion"
				testCompile "org.jetbrains.kotlin:kotlin-test-js:$librariesVersion"
			}

			kotlin {
				experimental { coroutines 'enable' }
			}

			[compileKotlin2Js, compileTestKotlin2Js]*.configure {
				kotlinOptions.moduleKind = "umd"
				kotlinOptions.sourceMap = true
			}

			task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
				from compileKotlin2Js.destinationDir

				configurations.testCompile.each {
					from zipTree(it.absolutePath).matching { include '*.js' }
				}

				into "${buildDir}/node_modules"
			}

			task runMocha(type: Task, dependsOn: [compileTestKotlin2Js, populateNodeModules]) {
				doLast {
					File fileOut = new File(compileTestKotlin2Js.outputFile)

					if (fileOut.exists()) {
						String[] cmd
						if (Os.isFamily(Os.FAMILY_WINDOWS)) {
							cmd = ["cmd", "/c", "mocha.cmd" as String, fileOut]
						} else {
							cmd = ["/bin/bash", '-c', "mocha '${fileOut}'"]
						}

						ProcessBuilder pb = new ProcessBuilder(cmd as String[])
						pb.environment().putAll(System.getenv())
						pb.directory(new File("$buildDir/node_modules"))
						def p = pb.start()
						p.in.eachLine { println(it) }
						if (p.waitFor() != 0) {
							throw new GradleException('error occurred running ' + cmd)
						}
					}
				}
			}

			test.dependsOn runMocha
		}
	}


	task javadoc2(type: Javadoc) {
		failOnError = false
	}

	task javadocJar(type: Jar, dependsOn: javadoc2) {
		classifier = 'javadoc'
		from 'build/docs/javadoc'
	}

	task sourcesJar(type: Jar) {
		from sourceSets.main.allSource
		classifier = 'sources'
	}

	artifacts {
		//archives jar
		archives javadocJar
		archives sourcesJar
	}

// gradle uploadArchives
	if (project.hasProperty('sonatypeUsername')) {
		signing {
			sign configurations.archives
		}

		uploadArchives {
			repositories {
				mavenDeployer {
					beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

					repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
						authentication(userName: project.sonatypeUsername, password: project.sonatypePassword)
					}

					pom.project {
						name "${project.name}"
						packaging 'jar'
						description 'kmem: Fast memory for Kotlin Common (JVM and JS) using Buffers and Typed Arrays'
						url 'https://github.com/korlibs/kmem/'
						inceptionYear '2016'

						scm {
							url 'scm:git@github.com:korlibs/kmem.git'
							connection 'scm:git@github.com:korlibs/kmem.git'
							developerConnection 'scm:git@github.com:korlibs/kmem.git'
						}

						licenses {
							license {
								name 'MIT License'
								url 'https://opensource.org/licenses/MIT'
								distribution 'repo'
							}
						}

						developers {
							developer {
								id 'soywiz'
								name 'Carlos Ballesteros Velasco'
							}
						}
					}
				}
			}
		}
	}

	publishing {
		publications {
			MyPublication(MavenPublication) {
				from components.java
				groupId project.group
				artifactId project.name
				version "$project.version"
			}
		}
	}

	task deploy(dependsOn: ['install', 'uploadArchives']) {
	}


}

