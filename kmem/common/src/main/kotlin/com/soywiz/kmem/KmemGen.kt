// @WARNING: File AUTOGENERATED by `kmem/jvm/src/test/kotlin/Generator.kt` do not modify manually!
@file:Suppress("NOTHING_TO_INLINE", "EXTENSION_SHADOWED_BY_MEMBER", "RedundantUnitReturnType", "FunctionName")
package com.soywiz.kmem

expect class MemBuffer
expect fun MemBufferAlloc(size: Int): MemBuffer
expect fun MemBufferWrap(array: ByteArray): MemBuffer
expect val MemBuffer.size: Int

expect fun MemBuffer._sliceInt8Buffer(byteOffset: Int, size: Int): Int8Buffer
expect fun MemBuffer._sliceInt16Buffer(byteOffset: Int, size: Int): Int16Buffer
expect fun MemBuffer._sliceInt32Buffer(byteOffset: Int, size: Int): Int32Buffer
expect fun MemBuffer._sliceFloat32Buffer(byteOffset: Int, size: Int): Float32Buffer
expect fun MemBuffer._sliceFloat64Buffer(byteOffset: Int, size: Int): Float64Buffer

fun MemBuffer.sliceInt8Buffer(byteOffset: Int = 0, size: Int = (this.size - byteOffset) / 1): Int8Buffer = this._sliceInt8Buffer(byteOffset, size)
fun MemBuffer.sliceInt16Buffer(byteOffset: Int = 0, size: Int = (this.size - byteOffset) / 2): Int16Buffer = this._sliceInt16Buffer(byteOffset, size)
fun MemBuffer.sliceInt32Buffer(byteOffset: Int = 0, size: Int = (this.size - byteOffset) / 4): Int32Buffer = this._sliceInt32Buffer(byteOffset, size)
fun MemBuffer.sliceFloat32Buffer(byteOffset: Int = 0, size: Int = (this.size - byteOffset) / 4): Float32Buffer = this._sliceFloat32Buffer(byteOffset, size)
fun MemBuffer.sliceFloat64Buffer(byteOffset: Int = 0, size: Int = (this.size - byteOffset) / 8): Float64Buffer = this._sliceFloat64Buffer(byteOffset, size)

fun MemBuffer.asInt8Buffer(): Int8Buffer = this.sliceInt8Buffer()
fun MemBuffer.asInt16Buffer(): Int16Buffer = this.sliceInt16Buffer()
fun MemBuffer.asInt32Buffer(): Int32Buffer = this.sliceInt32Buffer()
fun MemBuffer.asFloat32Buffer(): Float32Buffer = this.sliceFloat32Buffer()
fun MemBuffer.asFloat64Buffer(): Float64Buffer = this.sliceFloat64Buffer()

expect class Int8Buffer
expect val Int8Buffer.buffer: MemBuffer
expect val Int8Buffer.byteOffset: Int
expect val Int8Buffer.size: Int
expect operator fun Int8Buffer.get(index: Int): Byte
expect operator fun Int8Buffer.set(index: Int, value: Byte): Unit

expect class Int16Buffer
expect val Int16Buffer.buffer: MemBuffer
expect val Int16Buffer.byteOffset: Int
expect val Int16Buffer.size: Int
expect operator fun Int16Buffer.get(index: Int): Short
expect operator fun Int16Buffer.set(index: Int, value: Short): Unit

expect class Int32Buffer
expect val Int32Buffer.buffer: MemBuffer
expect val Int32Buffer.byteOffset: Int
expect val Int32Buffer.size: Int
expect operator fun Int32Buffer.get(index: Int): Int
expect operator fun Int32Buffer.set(index: Int, value: Int): Unit

expect class Float32Buffer
expect val Float32Buffer.buffer: MemBuffer
expect val Float32Buffer.byteOffset: Int
expect val Float32Buffer.size: Int
expect operator fun Float32Buffer.get(index: Int): Float
expect operator fun Float32Buffer.set(index: Int, value: Float): Unit

expect class Float64Buffer
expect val Float64Buffer.buffer: MemBuffer
expect val Float64Buffer.byteOffset: Int
expect val Float64Buffer.size: Int
expect operator fun Float64Buffer.get(index: Int): Double
expect operator fun Float64Buffer.set(index: Int, value: Double): Unit

expect fun arraycopy(src: ByteArray, srcPos: Int, dst: ByteArray, dstPos: Int, size: Int): Unit
expect fun arraycopy(src: ShortArray, srcPos: Int, dst: ShortArray, dstPos: Int, size: Int): Unit
expect fun arraycopy(src: IntArray, srcPos: Int, dst: IntArray, dstPos: Int, size: Int): Unit
expect fun arraycopy(src: FloatArray, srcPos: Int, dst: FloatArray, dstPos: Int, size: Int): Unit
expect fun arraycopy(src: DoubleArray, srcPos: Int, dst: DoubleArray, dstPos: Int, size: Int): Unit

expect fun arraycopy(src: MemBuffer, srcPos: Int, dst: MemBuffer, dstPos: Int, size: Int): Unit
expect fun arraycopy(src: ByteArray, srcPos: Int, dst: MemBuffer, dstPos: Int, size: Int): Unit
expect fun arraycopy(src: MemBuffer, srcPos: Int, dst: ByteArray, dstPos: Int, size: Int): Unit
expect fun arraycopy(src: ShortArray, srcPos: Int, dst: MemBuffer, dstPos: Int, size: Int): Unit
expect fun arraycopy(src: MemBuffer, srcPos: Int, dst: ShortArray, dstPos: Int, size: Int): Unit
expect fun arraycopy(src: IntArray, srcPos: Int, dst: MemBuffer, dstPos: Int, size: Int): Unit
expect fun arraycopy(src: MemBuffer, srcPos: Int, dst: IntArray, dstPos: Int, size: Int): Unit
expect fun arraycopy(src: FloatArray, srcPos: Int, dst: MemBuffer, dstPos: Int, size: Int): Unit
expect fun arraycopy(src: MemBuffer, srcPos: Int, dst: FloatArray, dstPos: Int, size: Int): Unit
expect fun arraycopy(src: DoubleArray, srcPos: Int, dst: MemBuffer, dstPos: Int, size: Int): Unit
expect fun arraycopy(src: MemBuffer, srcPos: Int, dst: DoubleArray, dstPos: Int, size: Int): Unit

@PublishedApi expect internal fun _fill(array: ByteArray, value: Byte, pos: Int, size: Int): Unit
@PublishedApi expect internal fun _fill(array: ShortArray, value: Short, pos: Int, size: Int): Unit
@PublishedApi expect internal fun _fill(array: IntArray, value: Int, pos: Int, size: Int): Unit
@PublishedApi expect internal fun _fill(array: FloatArray, value: Float, pos: Int, size: Int): Unit
@PublishedApi expect internal fun _fill(array: DoubleArray, value: Double, pos: Int, size: Int): Unit

inline fun ByteArray.fill(value: Byte, pos: Int = 0, size: Int = this.size): Unit = _fill(this, value, pos, size)
inline fun ShortArray.fill(value: Short, pos: Int = 0, size: Int = this.size): Unit = _fill(this, value, pos, size)
inline fun IntArray.fill(value: Int, pos: Int = 0, size: Int = this.size): Unit = _fill(this, value, pos, size)
inline fun FloatArray.fill(value: Float, pos: Int = 0, size: Int = this.size): Unit = _fill(this, value, pos, size)
inline fun DoubleArray.fill(value: Double, pos: Int = 0, size: Int = this.size): Unit = _fill(this, value, pos, size)
